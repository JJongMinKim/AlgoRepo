"""
문제 접근 방식:
    - 예제를 보고 1 ~ 10원까지 사용해야 하는 동전의 갯수를 나열해보았지만 어떠한 규칙성도 찾아볼 수 없었다.
    - 생각을 반복하면서 뭔가 동전의 가치를 뺀 부분에서 뭔가를 얻어야 할 것 같다는 생각을 했지만 결국 해내지 못하고 정답을 봤다.
    - 해당 문제에서 요구하는 알고리즘은 다음과 같았다.
        1. 1 ~ k원 까지 첫 번째 동전으로 만들 수 있는 경우의 수를 초기화 한다.
        2. 두 번째 동전부터 메모이제이션을 진행하는데 각 칸에 들어갈 값은 (이전 동전값으로 만들 수 있는 경우의 수 + 현재 동전값을 뺀 인덱스의 경우의 수) = (dp[i-1][cur] + dp[i][cur - price])
        3. 최종 dp[n][k] 리턴
"""

n, k = map(int, input().split(' '))

dp = [0 for _ in range(k + 1)]
dp[0] = 1

for _ in range(n):
    coin = int(input())
    for krw in range(coin, k+1, coin):
        dp[krw] = dp[krw] + dp[krw - coin]

print(dp[k])